from telegram import Update
from telegram.ext import ContextTypes
from database.crud import update_debt, get_all_debts, create_transaction, get_transactions
from utils.auth import owner_only
from utils.formatting import format_amount
from datetime import datetime

async def parse_debt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /–∫–æ–º–∞–Ω–¥–∞ –ò–º—è –°—É–º–º–∞")
        return None, None
    
    person_name = ' '.join(context.args[:-1])
    try:
        amount = float(context.args[-1])
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            return None, None
        return person_name, amount
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")
        return None, None

@owner_only
async def borrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    person_name, amount = await parse_debt_command(update, context)
    if person_name is None:
        return
    
    user_id = update.message.from_user.id
    update_debt(user_id, person_name, -amount)
    create_transaction(user_id, person_name, -amount, 'borrow')
    
    debts = get_all_debts(user_id)
    current_balance = next((debt.amount for debt in debts if debt.person_name == person_name), 0)
    
    message = f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ: –≤—ã –∑–∞–Ω—è–ª–∏ —É {person_name} {format_amount(amount)}\n"
    if current_balance < 0:
        message += f"üí∏ –¢–µ–ø–µ—Ä—å –≤—ã –¥–æ–ª–∂–Ω—ã {person_name}: {format_amount(-current_balance)}"
    elif current_balance > 0:
        message += f"üí∞ –¢–µ–ø–µ—Ä—å {person_name} –¥–æ–ª–∂–µ–Ω –≤–∞–º: {format_amount(current_balance)}"
    else:
        message += f"‚úîÔ∏è –í–∑–∞–∏–º–Ω—ã–µ –¥–æ–ª–≥–∏ —Å {person_name} –ø–æ–≥–∞—à–µ–Ω—ã"
    
    await update.message.reply_text(message)

@owner_only
async def lend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    person_name, amount = await parse_debt_command(update, context)
    if person_name is None:
        return
    
    user_id = update.message.from_user.id
    update_debt(user_id, person_name, amount)
    create_transaction(user_id, person_name, amount, 'lend')
    
    debts = get_all_debts(user_id)
    current_balance = next((debt.amount for debt in debts if debt.person_name == person_name), 0)
    
    message = f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ: –≤—ã –¥–∞–ª–∏ –≤–∑–∞–π–º—ã {person_name} {format_amount(amount)}\n"
    if current_balance < 0:
        message += f"üí∏ –¢–µ–ø–µ—Ä—å –≤—ã –¥–æ–ª–∂–Ω—ã {person_name}: {format_amount(-current_balance)}"
    elif current_balance > 0:
        message += f"üí∞ –¢–µ–ø–µ—Ä—å {person_name} –¥–æ–ª–∂–µ–Ω –≤–∞–º: {format_amount(current_balance)}"
    else:
        message += f"‚úîÔ∏è –í–∑–∞–∏–º–Ω—ã–µ –¥–æ–ª–≥–∏ —Å {person_name} –ø–æ–≥–∞—à–µ–Ω—ã"
    
    await update.message.reply_text(message)

@owner_only
async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    person_name, amount = await parse_debt_command(update, context)
    if person_name is None:
        return
    
    user_id = update.message.from_user.id
    update_debt(user_id, person_name, amount)
    create_transaction(user_id, person_name, amount, 'pay')
    
    debts = get_all_debts(user_id)
    current_balance = next((debt.amount for debt in debts if debt.person_name == person_name), 0)
    
    message = f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ: –≤—ã –≤–µ—Ä–Ω—É–ª–∏ {person_name} {format_amount(amount)}\n"
    if current_balance < 0:
        message += f"üí∏ –¢–µ–ø–µ—Ä—å –≤—ã –¥–æ–ª–∂–Ω—ã {person_name}: {format_amount(-current_balance)}"
    elif current_balance > 0:
        message += f"üí∞ –¢–µ–ø–µ—Ä—å {person_name} –¥–æ–ª–∂–µ–Ω –≤–∞–º: {format_amount(current_balance)}"
    else:
        message += f"‚úîÔ∏è –í–∑–∞–∏–º–Ω—ã–µ –¥–æ–ª–≥–∏ —Å {person_name} –ø–æ–≥–∞—à–µ–Ω—ã"
    
    await update.message.reply_text(message)

@owner_only
async def returned(update: Update, context: ContextTypes.DEFAULT_TYPE):
    person_name, amount = await parse_debt_command(update, context)
    if person_name is None:
        return
    
    user_id = update.message.from_user.id
    update_debt(user_id, person_name, -amount)
    create_transaction(user_id, person_name, -amount, 'returned')
    
    debts = get_all_debts(user_id)
    current_balance = next((debt.amount for debt in debts if debt.person_name == person_name), 0)
    
    message = f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ: {person_name} –≤–µ—Ä–Ω—É–ª –≤–∞–º {format_amount(amount)}\n"
    if current_balance < 0:
        message += f"üí∏ –¢–µ–ø–µ—Ä—å –≤—ã –¥–æ–ª–∂–Ω—ã {person_name}: {format_amount(-current_balance)}"
    elif current_balance > 0:
        message += f"üí∞ –¢–µ–ø–µ—Ä—å {person_name} –¥–æ–ª–∂–µ–Ω –≤–∞–º: {format_amount(current_balance)}"
    else:
        message += f"‚úîÔ∏è –í–∑–∞–∏–º–Ω—ã–µ –¥–æ–ª–≥–∏ —Å {person_name} –ø–æ–≥–∞—à–µ–Ω—ã"
    
    await update.message.reply_text(message)

@owner_only
async def show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    debts = get_all_debts(user_id)
    
    if not debts:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤")
        return
    
    message = "üìä –í–∞—à–∏ –¥–æ–ª–≥–∏:\n\n"
    total_debt = 0
    
    for debt in debts:
        if debt.amount < 0:
            message += f"üí∏ {debt.person_name}: {format_amount(-debt.amount)} (–≤—ã –¥–æ–ª–∂–Ω—ã)\n"
        else:
            message += f"üí∞ {debt.person_name}: {format_amount(debt.amount)} (–≤–∞–º –¥–æ–ª–∂–Ω—ã)\n"
        total_debt += debt.amount
    
    message += f"\nüí∞ –ò—Ç–æ–≥–æ: {format_amount(abs(total_debt))}"
    if total_debt < 0:
        message += " (–≤—ã –≤ –¥–æ–ª–≥—É)"
    elif total_debt > 0:
        message += " (–≤–∞–º –¥–æ–ª–∂–Ω—ã)"
    
    await update.message.reply_text(message)

@owner_only
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    person_name = ' '.join(context.args) if context.args else None
    
    transactions = get_transactions(user_id, person_name)
    
    if not transactions:
        if person_name:
            await update.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å {person_name} –ø—É—Å—Ç–∞")
        else:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
        return
    
    message = "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"
    if person_name:
        message += f" —Å {person_name}"
    message += ":\n\n"
    
    for transaction in transactions:
        # Format date as requested: "2025 Jul 17, 19:04"
        date_str = transaction.created_at.strftime("%Y %b %d, %H:%M")
        
        # Determine the sign and description based on transaction type
        if transaction.transaction_type == 'borrow':
            # I borrowed money (negative for me)
            amount_str = f"-{format_amount(abs(transaction.amount))}"
            action = "–≤—ã –∑–∞–Ω—è–ª–∏ —É"
        elif transaction.transaction_type == 'lend':
            # I lent money (positive for me)
            amount_str = f"+{format_amount(abs(transaction.amount))}"
            action = "–≤—ã –¥–∞–ª–∏ –≤–∑–∞–π–º—ã"
        elif transaction.transaction_type == 'pay':
            # I paid back (positive for me, reducing my debt)
            amount_str = f"+{format_amount(abs(transaction.amount))}"
            action = "–≤—ã –≤–µ—Ä–Ω—É–ª–∏"
        elif transaction.transaction_type == 'returned':
            # Someone returned money to me (negative for me, reducing what they owe)
            amount_str = f"-{format_amount(abs(transaction.amount))}"
            action = "–≤–∞–º –≤–µ—Ä–Ω—É–ª"
        
        message += f"üìÖ {date_str}\n"
        message += f"üíµ {amount_str} ({action} {transaction.person_name})\n\n"
    
    await update.message.reply_text(message)